---
title: "Week 8 Sampling Project Analysis"
format: pdf
editor: visual
---
```{r}
library(gridExtra)
library(grid)
library(ggplot2)
library(jsonlite)
library(sampling)
```

## Sampling fraction accross Stata

$$
f_h = n_h/N_h
$$

$$
n * MOS/\sum MOS
$$

```{r}
## Proportionate allocation n_opt  
n_opt <- 96 

# Given data from week 5
regions <- c(1:9)
total_students <- c(2893, 5474, 8044, 4855, 14692, 31140, 177421, 178447, 374755)
num_schools <- c(16, 30, 30, 31, 69, 123, 598, 517, 923)
proportions <- c(0.0035, 0.0066, 0.0097, 0.0058, 0.0177, 0.0375, 0.2137, 0.2150, 0.4514)

# Compute allocated clusters
allocated_clusters <- ceiling((n_opt * proportions))

# Compute first-stage sampling fractions
sampling_fraction <- (allocated_clusters*total_students)/sum(total_students)

# Create data frame with everything
region_data <- data.frame(
  Region = regions,
  Total_Students = total_students,
  Num_Schools = num_schools,
  Proportion = proportions,
  Allocated_Clusters = round(allocated_clusters, 2),
  Sampling_Fraction = round(sampling_fraction, 4)
)

# Output results using cat
for (i in 1:length(regions)) {
  cat("Region", regions[i], "allocated clusters:", allocated_clusters[i], "\n")
  cat("Region", regions[i], "first-stage sampling fraction:", round(sampling_fraction[i], 4), "\n")
  cat("\n")
}


write_json(region_data, "region_data.json")

```

$$
\sum MOS_hi/n_h 
$$ 

## PPeS zone size

```{r}
MI_school_frame_head_counts <- read_excel("MI_school_frame_head_counts.xls")
head(MI_school_frame_head_counts)
```


```{r}
# Arrange by region and then tot_all (ascending)
ordered_by_tot_all <- MI_school_frame_head_counts %>%
  arrange(Region, tot_all)

# View the ordered dataset
head(ordered_by_tot_all)

# Function to calculate MOS, region count, and MOS/Region Count
compute_MOS_and_region_count <- function(data) {
  data %>%
    group_by(Region) %>%
    summarise(
      MOS = sum(tot_all),          # Sum of tot_all for each region
      region_count = n(),          # Count of rows for each region
      Zone_size = MOS / region_count   # MOS divided by region count
    )
}

# Apply the function
result <- compute_MOS_and_region_count(ordered_by_tot_all)

# View the result
print(result)

```

## Systemmatic selection

$$
9 * MOS / \sum MOS
$$

```{r}
set.seed(123456) 
random_start <- as.integer(runif(9, min = 0, max = result$Zone_size))
print(random_start)

head(ordered_by_tot_all)

selected_schools_by_region <- list()

for (region in 1:9) {
  
  # Filter for this region
  region_data <- ordered_by_tot_all[ordered_by_tot_all$Region == region, ]
  
  # Number of schools to select in this region
  n_selected <- allocated_clusters[region]
  
  # Original k (zone size)
  k <- result$Zone_size[region]
  
  # Random start
  start <- random_start[region]
  
  # Max tot_all for this region
  max_tot_all <- max(region_data$tot_all)
  
  # Keep adjusting k by removing the last digit until it's small enough
  while ((start + (n_selected - 1) * k) > max_tot_all && k >= 10) {
    k <- as.numeric(substr(as.character(floor(k)), 1, nchar(floor(k)) - 1))
  }
  
  # Sampling points
  selection_points <- start + (0:(n_selected - 1)) * k

  # Select rows: first where tot_all >= selection point
  selected_rows <- sapply(selection_points, function(point) {
    which(region_data$tot_all >= point)[1]
  })

  # Store results (including duplicates/NA)
  selected_schools_by_region[[region]] <- region_data[selected_rows, ]
}

# Combine into final dataset
final_sample <- do.call(rbind, selected_schools_by_region)

```

```{r}
first_stage_region1 <- ((1*154)/result$MOS[1]) 
first_stage_region2 <- ((1*154)/result$MOS[2])
first_stage_region3 <- ((1*121)/result$MOS[3])
first_stage_region4 <- ((1*57)/result$MOS[4])
first_stage_region5 <- ((2*88)/result$MOS[5])
first_stage_region6 <- ((4*51)/result$MOS[6])
first_stage_region7 <- ((21*161)/result$MOS[7])
first_stage_region8 <- ((21*33)/result$MOS[8])
first_stage_region9 <- ((44*401)/result$MOS[9])

# Output the values
cat("First-stage sampling fraction for Region 1:", first_stage_region1, "\n")
cat("First-stage sampling fraction for Region 2:", first_stage_region2, "\n")
cat("First-stage sampling fraction for Region 3:", first_stage_region3, "\n")
cat("First-stage sampling fraction for Region 4:", first_stage_region4, "\n")
cat("First-stage sampling fraction for Region 5:", first_stage_region5, "\n")
cat("First-stage sampling fraction for Region 6:", first_stage_region6, "\n")
cat("First-stage sampling fraction for Region 7:", first_stage_region7, "\n")
cat("First-stage sampling fraction for Region 8:", first_stage_region8, "\n")
cat("First-stage sampling fraction for Region 9:", first_stage_region9, "\n")
```


Inferences:


So for this statewide education study, we aimed to balance efficiency and fairness by dividing Michigan into nine geographic regions (like puzzle pieces) and treating each as its own unique "stratum." Regions with more students—like Region 9, which had nearly half the state’s student population—naturally got more schools in the sample. This proportional allocation ensured heavily populated areas weren’t overlooked, while smaller regions still had a voice.

Next, we calculated the average school size for each region by tallying all students and dividing by the number of schools—a way to gauge whether a region had lots of small schools or a few large ones. Then came the clever part: systematically selecting schools. We lined up schools in each region by size (smallest to largest) and used a random starting point to pick schools at evenly spaced intervals. Think of it like spacing out survey participants at a concert—bigger schools (the loudest voices) got picked more often, while smaller ones still had a chance.

Finally, we checked the math i.e. for each region, we calculated what percentage of its students would end up in the sample based on how many schools we selected and their average size. This "sampling fraction" acted like a reality check, confirming that our design didn’t accidentally over- or under-represent any area.

The results were as follows:

Region 1: 4.32%
Region 2: 2.81%
Region 3: 1.40%
Region 4: 1.17%
Region 5: 0.93%
Region 6: 0.62%
Region 7: 1.76%
Region 8: 0.37%
Region 9: 4.71%

So, by blending stratification, proportional allocation, and size-aware sampling, this method ensured the study was both statistically robust and practical—like tailoring a suit to fit Michigan’s educational landscape perfectly.


