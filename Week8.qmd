---
title: "Week 8 Sampling Project Analysis"
format: pdf
editor: visual
---

## Sampling fraction accross Stata

$$
f_h = n_h/N_h
$$

$$
n * MOS/\sum MOS
$$

```{r}
## Proportionate allocation n_opt  
n_opt <- 96.15385  

# Given data from week 5
regions <- c(1:9)
total_students <- c(2893, 5474, 8044, 4855, 14692, 31140, 177421, 178447, 374755)
num_schools <- c(16, 30, 30, 31, 69, 123, 598, 517, 923)
proportions <- c(0.0035, 0.0066, 0.0097, 0.0058, 0.0177, 0.0375, 0.2137, 0.2150, 0.4514)

# Compute allocated clusters
allocated_clusters <- ceiling((n_opt * proportions))

# Compute first-stage sampling fractions
sampling_fraction <- (allocated_clusters*total_students)/num_schools

# Create data frame with everything
region_data <- data.frame(
  Region = regions,
  Total_Students = total_students,
  Num_Schools = num_schools,
  Proportion = proportions,
  Allocated_Clusters = round(allocated_clusters, 2),
  Sampling_Fraction = round(sampling_fraction, 4)
)

# Output results using cat
for (i in 1:length(regions)) {
  cat("Region", regions[i], "allocated clusters:", allocated_clusters[i], "\n")
  cat("Region", regions[i], "first-stage sampling fraction:", round(sampling_fraction[i], 4), "\n")
  cat("\n")
}


```

$$
\sum MOS_hi/n_h 
$$ 

## PPeS zone size

```{r}
MI_school_frame_head_counts <- read_excel("~/Desktop/U of M 24-26/Winter 2025/SURVMETH 625 Applied Sampling/Sampling Project /MI_school_frame_head_counts.xls")
head(MI_school_frame_head_counts)
```


```{r}
# Arrange by region and then tot_all (ascending)
ordered_by_tot_all <- MI_school_frame_head_counts %>%
  arrange(Region, tot_all)

# View the ordered dataset
head(ordered_by_tot_all)

# Function to calculate MOS, region count, and MOS/Region Count
compute_MOS_and_region_count <- function(data) {
  data %>%
    group_by(Region) %>%
    summarise(
      MOS = sum(tot_all),          # Sum of tot_all for each region
      region_count = n(),          # Count of rows for each region
      Zone_size = MOS / region_count   # MOS divided by region count
    )
}

# Apply the function
result <- compute_MOS_and_region_count(ordered_by_tot_all)

# View the result
print(result)

```

## Systemmatic selection

$$
9 * MOS / \sum MOS
$$

```{r}
set.seed(123456) 
random_start <- runif(9, min = 0, max = result$Zone_size)
print(random_start)

head(ordered_by_tot_all)


first_stage_region1 <- ((180.8125*37)/result$MOS[1]) 
first_stage_region2 <- ((182.4667*154)/result$MOS[2])
first_stage_region3 <- ((268.1333*177)/result$MOS[3])
first_stage_region4 <- ((156.6129*152)/result$MOS[4])
first_stage_region5 <- ((425.8551*210)/result$MOS[5])
first_stage_region6 <- ((1012.6829*249)/result$MOS[6])
first_stage_region7 <- ((6230.5033*268)/result$MOS[7])
first_stage_region8 <- ((7248.3308*303)/result$MOS[8])
first_stage_region9 <- ((17864.8104*80)/result$MOS[9])

# Output the values
cat("First-stage sampling fraction for Region 1:", first_stage_region1, "\n")
cat("First-stage sampling fraction for Region 2:", first_stage_region2, "\n")
cat("First-stage sampling fraction for Region 3:", first_stage_region3, "\n")
cat("First-stage sampling fraction for Region 4:", first_stage_region4, "\n")
cat("First-stage sampling fraction for Region 5:", first_stage_region5, "\n")
cat("First-stage sampling fraction for Region 6:", first_stage_region6, "\n")
cat("First-stage sampling fraction for Region 7:", first_stage_region7, "\n")
cat("First-stage sampling fraction for Region 8:", first_stage_region8, "\n")
cat("First-stage sampling fraction for Region 9:", first_stage_region9, "\n")
```
## Paired selection
```{r}
# Define the region numbers you want to include, in order
selected_regions <- c(6, 5, 3, 4, 1, 1, 1, 1, 1)

# Extract the corresponding rows from ordered_region_data_with_total
selected_rows_df <- ordered_region_data_with_total[
  ordered_region_data_with_total$Region %in% selected_regions & 
  ordered_region_data_with_total$Region != "Total",  # Exclude "Total" row
]

# Ensure the rows appear in the same order as the selected_regions vector
selected_rows_df <- do.call(rbind, lapply(selected_regions, function(r) {
  selected_rows_df[selected_rows_df$Region == r, ]
}))

# Print the resulting data frame
print(selected_rows_df)

```

```{r}
# Sort by Num_Schools to simulate the process of pairing based on size
pseudo_strata_sorted_df <- selected_rows_df[order(selected_rows_df$Num_Schools), ]

# Create pseudo-strata by pairing consecutive rows
pseudo_strata <- split(pseudo_strata_sorted_df$Region, ceiling(seq_along(pseudo_strata_sorted_df$Region) / 2))

# Show the pseudo-strata (pairs of regions)
pseudo_strata

```

```{r}
f * sum(REG4$tot_all)/ n 
```



